#tag ClassProtected Class StreamingArray	#tag Method, Flags = &h1000		Sub Constructor(f As FolderItem, lines As Integer, rows As Integer, elementType As Integer)		  // Calling the overridden superclass constructor.		  		  elementSizes.Append 4 // kInteger		  elementSizes.Append 4 // kUInt32		  elementSizes.Append 4 // kInt32		  elementSizes.Append 4 // kSingle		  elementSizes.Append 8 // kDouble		  elementSizes.Append 8 // kUInt64		  elementSizes.Append 8 // kInt64		  		  nRows=rows		  nLines=lines		  		  mySize=elementSizes(elementType)		  myType=elementType		  		  Dim bs As BinaryStream		  bs=bs.Open(f, False)		  if bs=Nil Then Return		  		  mb=bs.Read(mySize*nRows*nLines)		  bs=Nil		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1000		Sub Constructor(lines As Integer, rows As Integer, elementType As Integer)		  // Calling the overridden superclass constructor.		  		  		  elementSizes.Append 4 // kInteger		  elementSizes.Append 4 // kUInt32		  elementSizes.Append 4 // kInt32		  elementSizes.Append 4 // kSingle		  elementSizes.Append 8 // kDouble		  elementSizes.Append 8 // kUInt64		  elementSizes.Append 8 // kInt64		  		  nRows=rows		  nLines=lines		  		  mySize=elementSizes(elementType)		  mb=New MemoryBlock(lines*rows*mySize)		  myType=elementType		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Element(y As Integer, x As Integer) As Variant		  Dim v As Variant		  Dim n As Integer		  		  n=y*nRows*mySize+x*mySize		  		  Select Case myType		    		  Case kInt32, kInteger		    v=mb.Int32Value(n)		    		  Case kUInt32		    v=mb.UInt32Value(n)		    		  Case kUInt64		    v=mb.UInt64Value(n)		    		  Case kInt64		    v=mb.Int64Value(n)		    		  Case kSingle		    v=mb.SingleValue(n)		    		  Case kDouble		    v=mb.DoubleValue(n)		    		  End Select		  		  Return v		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Element(y As Integer, x As Integer, Assigns v As Variant)		  Dim n As Integer		  		  n=y*nRows*mySize+x*mySize		  		  Select Case myType		    		  Case kInt32, kInteger		    mb.Int32Value(n)=v		    		  Case kUInt32		    mb.UInt32Value(n)=v		    		  Case kUInt64		    mb.UInt64Value(n)=v		    		  Case kInt64		    mb.Int64Value(n)=v		    		  Case kSingle		    mb.SingleValue(n)=v		    		  Case kDouble		    mb.DoubleValue(n)=v		    		  End Select		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Export(f As FolderItem) As Integer		  Dim bs0, bs1 As BinaryStream		  Dim i As Integer		  		  bs0=bs0.Create(f, True)		  if bs0=Nil Then Return -1		  bs1=New BinaryStream(mb)		  if bs1=Nil Then Return -2		  i=bs1.Length		  bs0.Write(bs1.Read(i))		  bs1=Nil		  bs0=Nil		  		  Return i		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Lines() As Integer		  Return nLines		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Rows() As Integer		  Return nRows		  		End Function	#tag EndMethod	#tag Property, Flags = &h1		Protected elementSizes() As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected mb As MemoryBlock	#tag EndProperty	#tag Property, Flags = &h1		Protected mySize As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected myType As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected nLines As Integer	#tag EndProperty	#tag Property, Flags = &h1		Protected nRows As Integer	#tag EndProperty	#tag Constant, Name = kDouble, Type = Double, Dynamic = False, Default = \"4", Scope = Public	#tag EndConstant	#tag Constant, Name = kInt32, Type = Double, Dynamic = False, Default = \"2", Scope = Public	#tag EndConstant	#tag Constant, Name = kInt64, Type = Double, Dynamic = False, Default = \"6", Scope = Public	#tag EndConstant	#tag Constant, Name = kInteger, Type = Double, Dynamic = False, Default = \"0", Scope = Public	#tag EndConstant	#tag Constant, Name = kSingle, Type = Double, Dynamic = False, Default = \"3", Scope = Public	#tag EndConstant	#tag Constant, Name = kUInt32, Type = Double, Dynamic = False, Default = \"1", Scope = Public	#tag EndConstant	#tag Constant, Name = kUInt64, Type = Double, Dynamic = False, Default = \"5", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass